From 33769412b5e7b8c578dcba73d3035fb1b6d10f7e Mon Sep 17 00:00:00 2001
From: Joshua Strobl <joshua@streambits.io>
Date: Wed, 11 Mar 2020 20:32:28 +0200
Subject: [PATCH 1/1] Implement AppMenu toggling.

In our previous GNOME Stack release, I opted to completely remove the AppMenu. This was done as there was clear indications at the time that it was planned to be deprecated or removed, given the respective functionality was being moved out of AppMenu across multiple GNOME applications and into the Headerbar menus. Unfortunately, either such deprecation hasn't come to fruition yet, there was mixed messaging by GNOME, or such plans are no longer moving forward.

As such, I've opted to implement a setting to enable the toggling on of AppMenu functionality. This is really only done to allow for Solus GNOME users to enable and utilize third-party extensions that otherwise leverage the AppMenu, otherwise I would just permanently remove the functionality given it provides no real user value otherwise (in my opinion).
---
 data/org.gnome.shell.gschema.xml.in |  7 +++++++
 js/ui/panel.js                      | 30 +++++++++++++++++++++++++----
 js/ui/popupMenu.js                  |  6 ++++++
 3 files changed, 39 insertions(+), 4 deletions(-)

diff --git a/data/org.gnome.shell.gschema.xml.in b/data/org.gnome.shell.gschema.xml.in
index 49d38d766..34e85e27c 100644
--- a/data/org.gnome.shell.gschema.xml.in
+++ b/data/org.gnome.shell.gschema.xml.in
@@ -32,6 +32,13 @@
         This key takes precedence over the “enabled-extensions” setting.
       </description>
     </key>
+    <key name="show-app-menu" type="b">
+        <default>false</default>
+        <summary>Show AppMenu</summary>
+        <description>
+            Shows the AppMenu with the current window information. Must be enabled for use by third-party AppMenu extensions.
+        </description>
+    </key>
     <key name="disable-user-extensions" type="b">
       <default>false</default>
       <summary>Disable user extensions</summary>
diff --git a/js/ui/panel.js b/js/ui/panel.js
index ec39cebb6..d772818e8 100644
--- a/js/ui/panel.js
+++ b/js/ui/panel.js
@@ -15,6 +15,7 @@ const Main = imports.ui.main;
 
 var PANEL_ICON_SIZE = 16;
 var APP_MENU_ICON_MARGIN = 0;
+const SHOW_APP_MENU = 'show-app-menu';
 
 var BUTTON_DND_ACTIVATION_TIMEOUT = 250;
 
@@ -243,9 +244,9 @@ var AppMenuButton = GObject.registerClass({
         });
         this._container.add_actor(this._spinner);
 
-        let menu = new AppMenu(this);
-        this.setMenu(menu);
-        this._menuManager.addMenu(menu);
+        this._appmenu = new AppMenu(this);
+        this.setMenu(this._appmenu);
+        this._menuManager.addMenu(this._appmenu);
 
         let tracker = Shell.WindowTracker.get_default();
         let appSys = Shell.AppSystem.get_default();
@@ -257,6 +258,8 @@ var AppMenuButton = GObject.registerClass({
             global.window_manager.connect('switch-workspace', this._sync.bind(this));
 
         this._sync();
+        global.settings.connect(`changed::${SHOW_APP_MENU}`, () => this._updateVisibility()); // Connect to our show-app-menu setting
+        this._updateVisibility(); // Do our initial trigger for AppMenu visibility
     }
 
     fadeIn() {
@@ -355,6 +358,10 @@ var AppMenuButton = GObject.registerClass({
     }
 
     _sync() {
+        if (!global.settings.get_boolean(SHOW_APP_MENU)) {
+            return;
+        }
+
         let targetApp = this._findTargetApp();
 
         if (this._targetApp != targetApp) {
@@ -393,6 +400,16 @@ var AppMenuButton = GObject.registerClass({
         this.emit('changed');
     }
 
+    _updateVisibility() {
+        if (global.settings.get_boolean(SHOW_APP_MENU)) { // If we should show it
+            this.show();
+        } else { // If we should hide it
+            this.hide();
+        }
+
+        this.emit('changed');
+    }
+
     _onDestroy() {
         if (this._appStateChangedSignalId > 0) {
             let appSys = Shell.AppSystem.get_default();
@@ -981,7 +998,12 @@ class Panel extends St.Widget {
     }
 
     toggleAppMenu() {
-        this._toggleMenu(this.statusArea.appMenu);
+        let show = global.settings.get_boolean(SHOW_APP_MENU); // Get the current value
+        if (show) {
+            this._toggleMenu(this.statusArea.appMenu);
+        } else {
+            this.hide();
+        }
     }
 
     toggleCalendar() {
diff --git a/js/ui/popupMenu.js b/js/ui/popupMenu.js
index ad827ac5b..0368d51ae 100644
--- a/js/ui/popupMenu.js
+++ b/js/ui/popupMenu.js
@@ -1323,6 +1323,12 @@ var PopupMenuManager = class {
     }
 
     removeMenu(menu) {
+        if (menu == undefined)
+            return;
+
+        if (this.activeMenu == undefined)
+            return;
+
         if (menu == this.activeMenu)
             this._closeMenu(false, menu);
 
-- 
2.25.1

